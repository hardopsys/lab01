#Xv6 is already set the timer for you. 

##Add "int priorityNum;" to proc struct?
First, you should have a priority attribute in the proc structure (in the proc.h). 

##In the void scheduler function, the object with the proc struct is created before anything else is done.
##So, priorityNum can be called with p->priorityNum
Then you need to modify the scheduler() function in the proc.c file. 

##Every process starts out with priority 0. Then you can change it to other priorities within the range of 0-63. 63 is the highest priority.
The default scheduler is round-robin. Now you need to change it to find a highest priority. 

###Proposal: have the priority scheduler as a function separate from the round-robin scheduler and have the priority scheduler run by default. Processes with the same priority will call the round-robin scheduler.

###Potential Problem: Comments say that scheduler never returns. Does this mean that doing a function call is not a possibility?
If there is a higher priority process, kernel should pick that process to run. 
If every processes' priority are same, then the scheduler would be back to round-robin scheduler. 
 
Best
Songwei Jin


Lingering questions:
-Seems like the comments seem to explain quite a lot of what is going on. How, though, does the timer come into play? Round robin strictly gives each process time to run, but I don't see this happening in the code.
